<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/lesson.css">
    <title>Lesson</title>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script> <!-- Include PDF.js -->
    
    <style>
        #uploadedPdfs li, #uploadedVideos li {
            display: inline-block; /* Allow list items to be inline */
            margin: 10px; /* Add some spacing between thumbnails */
            text-align: center; /* Center the text and canvas */
        }

        canvas {
            border: 2px solid #007bff; /* Add a blue border around the thumbnail */
            border-radius: 5px; /* Optional: round the corners */
            cursor: pointer; /* Change cursor to pointer on hover */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Optional: add some shadow */
            width: 150px; /* Set the width of the canvas for PDFs */
            height: auto; /* Set the height of the canvas for PDFs */
        }

        video {
            border: 2px solid #007bff; /* Add a blue border around the thumbnail */
            border-radius: 5px; /* Optional: round the corners */
            cursor: pointer; /* Change cursor to pointer on hover */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Optional: add some shadow */
            width: 150px; /* Set the width of the video thumbnail */
            height: auto; /* Set the height of the video thumbnail */
        }

        /* Modal styles for video */
        #videoModal .modal-content {
            width: 80%; /* Set modal width */
            max-width: 800px; /* Set max width for larger screens */
            margin: auto; /* Center the modal */
        }

        #videoViewer {
            width: 100%; /* Make video fill modal */
            height: auto; /* Maintain aspect ratio */
        }
    </style>
</head>
<body>
    <div class="container-fluid p-0">
        <div class="upper-side row no-gutters p-3" style="background-color: #E0F4F9;">
            <aside class="col-md-2 sidebar section greeting-text p-2 font-weight-bold text-muted" style="background-color: #E0F4F9;">
                Hello <img src="/assets/settings-1.svg" alt="Settings" class="img-fluid">
            </aside>
            <main class="col-md-8 bg-main section">
                <select class="form-control mr-2">
                    <option value="">Select Level</option>
                    <script>
                        for (let i = 1; i <= 30; i++) {
                            document.write(`<option value="level${i}.html">Level ${i}</option>`);
                        }
                    </script>
                </select>
            </main>
            <div class="col-md-2 bg-right-side section">
                <select class="form-control">
                    <option value="">Select Week</option>
                    <script>
                        for (let i = 1; i <= 6; i++) {
                            document.write(`<option value="week${i}.html">Week ${i}</option>`);
                        }
                    </script>
                </select>
            </div>
        </div>

        <div class="containers row">
            <aside class="col-md-1 bg-info text-center p-3 rounded-sidebar">
                <nav>
                    <ul class="list-unstyled">
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/dashboard/<%= room._id %>" class="text-dark">
                                <img src="/assets/homebut.png" alt="Home Button" style="width: 60px; height: 60px; display: block; margin:  0 auto;">
 Dashboard
                            </span>
                        </li>
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/lesson/<%= room._id %>" class="text-dark lesson-button">
                                <span class="text-dark font-weight-bold" style="padding: 10px; display: block;">
                                <img src="/assets/lessonbut.png" alt="Lesson Button" style="width: 60px; height: 60px; display: block; margin: 0 auto;">
                                Lesson
                                </span>
                            </a>
                        </li>
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/activities/<%= room._id %>" class="text-dark">
                                <img src="/assets/activitiesbut.png" alt="Activities Button" style="width: 70px; height: 70px; display: block; margin: 0 auto;">
                                Activities
                            </a >
                        </li>
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/educGames/<%= room._id %>" class="text-dark">
                                <img src="/assets/educgamesbut.png" alt="Educational Games Button" style="width: 70px; height: 70px; display: block; margin: 0 auto;">
                                Educational Games
                            </a>
                        </li>
                    </ul>
                </nav>
            </aside>

            <main class="col-md-11">
                <div class="d-flex align-items-center mb-4">
                    <img src="/assets/grid.svg" alt="Grid" class="mr-2" style="width: 20px; height: 20px;">
                    <h4 class="font-weight-bold mb-0 text-dark">Lesson</h4>
                </div>

                <h5>Existing Lesson Rooms</h5>
                <ul class="list-group d-flex flex-row flex-wrap">
                    <% 
                    const buttonColors = ["color-1", "color-2", "color-3", "color-4"];
                    const imgSources = [
                        "/assets/english-4.svg",
                        "/assets/layer-1.svg",
                        "/assets/geography-1.svg",
                        "/assets/socio-1.svg"
                    ];
                
                    lessonRooms.forEach(function(lessonRoom, index) { 
                        const colorClass = buttonColors[index % buttonColors.length];
                        const imgSrc = imgSources[index % imgSources.length];
                    %>
                    <li class="list-group-item lesson-room d-flex align-items-center mr-2 clickable <%= colorClass %>" 
                        data-room-id="<%= lessonRoom._id %>">
                        <strong class="mr-2"><%= lessonRoom.subject %></strong> <%= lessonRoom.topic %>
                        <img src="<%= imgSrc %>" alt="<%= lessonRoom.subject %> Icon" class="ml-2" style="width: 40px;">
                    </li>
                    <% }); %>
                </ul>
                
            
              <!-- New big box section -->
<div class="newbigbox" style="display: none;"> <!-- Initially hidden -->
    <div class="d-flex justify-content-center mt-3">
        <button id="moduleButton" class="btn custom-btn">Module</button>
        <button id="videoButton" class="btn custom-btn">Video</button>
    </div>
</div>

<!-- Separate PDF Upload Box -->
<div id="uploadPdfSection" class="upload-box" style="display: none;"> <!-- Initially hidden -->
    <div class="left-content"> 
        <h5 class="text-dark">Upload PDF</h5>
        <form id="uploadPdfForm" action="/admin/upload-pdf/<%= room._id %>" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="roomId" id="pdfRoomId" value="">
            <div class="form-group">
                <label for="pdfFile">Choose PDF file:</label>
                <input type="file" name="pdfFile" class="form-control-file" id="pdfFile" accept=".pdf" required>
            </div>
            <button type="submit" class="btn btn-primary">Upload PDF</button>
        </form>
        
        <div class="lesson-content">
            <!-- Placeholder for dynamically loaded PDFs -->
            <h3>Uploaded PDFs</h3>
            <ul id="uploadedPdfs"></ul>
        </div>
    </div>
</div>

<!-- Separate Video Upload Box -->
<div id="uploadVideoSection" class="upload-box" style="display: none;"> <!-- Initially hidden -->
    <div class="right-content">
        <h5 class="text-dark">Upload Video</h5>
        <form id="uploadVideoForm" action="" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="roomId" id="videoRoomId" value="">
            <div class="form-group">
                <label for="videoFile">Choose MP4 video:</label>
                <input type="file" name="videoFile" class="form-control-file" id="videoFile" accept=".mp4" required>
            </div>
            <button type="submit" class="btn btn-primary">Upload Video</button>
        </form>
        
        <div class="lesson-content">
            <!-- Placeholder for dynamically loaded videos -->
            <h3>Uploaded Videos</h3>
            <ul id="uploadedVideos"></ul>
        </div>
    </div>
</div>

            
                <!-- Lesson Room Creation Form -->
                <div class="layered-container">
                    <div class="form-overlay">
                        <h5 class="card-title">Create a New Lesson Room</h5>
                        <form id="createLessonRoomForm" action="/admin/create-lesson-room/<%= room._id %>" method="POST">
                            <div class="form-group">
                                <label for="subject">Subject</label>
                                <input type="text" class="form-control" id="subject" name="subject" placeholder="Enter subject" required>
                            </div>
                            <div class="form-group">
                                <label for="topic">Topic</label>
                                <input type="text" class="form-control" id="topic" name="topic" placeholder="Enter topic" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Create Room</button>
                        </form>
                    </div>
                </div>  
            </main>                                   
        </div>

        <!-- Hidden content section that will be shown upon clicking a lesson room -->
        <div id="lessonRoomContent" class="big-box" style="display: none;">
            <div class="content-wrapper">
                <!-- PDF Preview Modal -->
                <div id="pdfModal" class="modal">
                    <div class="modal-content">
                        <span class="close" onclick="closePdfModal()">&times;</span>
                        <iframe id="pdfViewer" src="" width="100%" height="100%"></iframe>
                    </div>
                    <div class="arrow-box-container">
                        <a href="/admin/activities/<%= room._id %>" class="arrow-text">would you like to take a Quiz </a>
                    </div>
                </div>
                <!-- Video Modal -->
                <div id="videoModal" style="display:none;">
                    <span id="closeVideoModal" style="cursor:pointer;" onclick="closeVideoModal()">X</span>
                    <video id="videoViewer" controls></video>
                </div>

            </div>
        </div>

       
       



        <script>
            // Function to send PDF progress to the server and update display in real-time
            function savePdfProgress(userId, pdfFileId, progress) {
                return fetch('/admin/lesson/pdf-progress', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, pdfFileId, progress })
                })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to save progress'))
                .then(data => {
                    if (data.success) {
                        // Update the progress display in the list immediately
                        const progressElement = document.getElementById(`progress_${pdfFileId}`);
                        if (progressElement) {
                            progressElement.textContent = `Progress: ${progress}%`;
                        }
                    }
                })
                .catch(error => console.error('Error saving progress:', error));
            }
        
            // Function to open the PDF modal and track progress by scrolling
            function openPdfModal(pdfUrl, pdfFileId, userId) {
                // Display the modal with the PDF content
                const pdfViewer = document.getElementById("pdfViewer");
                pdfViewer.src = pdfUrl;
                document.getElementById("pdfModal").style.display = "block";
        
                // Save initial progress as 100% upon opening if it’s not already full
                savePdfProgress(userId, pdfFileId, 100);
        
                // Track scroll progress within the modal
                pdfViewer.onload = function () {
                    const scrollHandler = () => {
                        const totalHeight = pdfViewer.contentDocument.documentElement.scrollHeight - pdfViewer.clientHeight;
                        const scrolled = pdfViewer.contentDocument.documentElement.scrollTop;
                        const progress = Math.min((scrolled / totalHeight) * 100, 100); // Cap at 100%
        
                        // Save and update display if scrolled to 100%
                        if (progress === 100) {
                            savePdfProgress(userId, pdfFileId, 100 ).then(() => {
                                pdfViewer.removeEventListener('scroll', scrollHandler);
                            });
                        }
                    };
        
                    // Attach the scroll event handler to track progress
                    pdfViewer.contentDocument.addEventListener('scroll', scrollHandler);
                };
            }
        
            // Function to close the PDF modal
            function closePdfModal() {
                document.getElementById("pdfModal").style.display = "none";
                document.getElementById("pdfViewer").src = ""; // Clear src to stop loading
            }
 // Function to load PDFs and Videos dynamically and display progress for PDFs
            async function loadLessonFiles(roomId, userId) {
                const pdfList = document.getElementById('uploadedPdfs');
                const videoList = document.getElementById('uploadedVideos'); // For displaying uploaded videos
                pdfList.innerHTML = ''; // Clear the PDF list
                videoList.innerHTML = ''; // Clear the Video list

                try {
                    const response = await fetch(`/admin/get-lessons/${roomId}`);
                    const lessonData = await response.json();

                    // Check if pdfFiles is a valid array and populate PDFs
                    if (Array.isArray(lessonData.pdfFiles) && lessonData.pdfFiles.length > 0) {
                        for (const pdf of lessonData.pdfFiles) {
                            const pdfFileId = pdf.pdfFileId;
                            const pdfFileName = pdf.pdfFileName;
                            const pdfUrl = `/admin/pdf/${pdfFileId}`; // URL to fetch the PDF

                            const listItem = document .createElement('li');
                            listItem.innerHTML = `
                                <div>
                                    <strong>${pdfFileName}</strong>
                                    <canvas id="thumbnail_${pdfFileId}" style="width: 50px; height: auto; cursor: pointer;"></canvas>
                                    <span id="progress_${pdfFileId}">Loading progress...</span>
                                </div>
                            `;
                            pdfList.appendChild(listItem);

                            // Generate thumbnail for the first page of the PDF
                            await renderPdfThumbnail(pdfUrl, pdfFileId);

                            // Fetch and display initial progress
                            const progressResponse = await fetch(`/admin/lesson/get-pdf-progress/${userId}/${pdfFileId}`);
                            const progressData = await progressResponse.json();
                            const progress = progressData.progress || 0;

                            // Safely get the progress element and update it
                            const progressElement = document.getElementById(`progress_${pdfFileId}`);
                            if (progressElement) {
                                progressElement.textContent = `Progress: ${progress}%`;
                            } else {
                                console.error(`Progress element for PDF ID ${pdfFileId} not found.`);
                            }
                        }
                    } else {
                        pdfList.innerHTML = '<p>No PDFs uploaded for this lesson.</p>';
                    }

                    // Populate the Videos
                    if (Array.isArray(lessonData.videoFiles) && lessonData.videoFiles.length > 0) {
                        lessonData.videoFiles.forEach(function (video) {
                            const videoFileId = video.videoFileId;
                            const videoFileName = video.videoFileName;
                            const videoUrl = `/admin/video/${videoFileId}`; // URL to fetch the video

                            const listItem = document.createElement('li');
                            listItem.innerHTML = `
                                <div>
                                    <strong>${videoFileName}</strong>
                                    <video id="video_${videoFileId}" style="display:none;" src="${videoUrl}" preload="metadata"></video>
                                    <canvas id="thumbnail_${videoFileId}" style="width: 150px; height: auto; cursor: pointer;"></canvas>
                                </div>
                            `;
                            videoList.appendChild(listItem);

                            // Capture the first frame as a thumbnail
                            const videoElement = document.getElementById(`video_${videoFileId}`);
                            const canvas = document.getElementById(`thumbnail_${videoFileId}`);
                            const context = canvas.getContext('2d');

                            videoElement.addEventListener('loadedmetadata', function() {
                                // Seek to the first frame (0 seconds)
                                videoElement.currentTime = 0; // Seek to the first frame
                            });

                            videoElement.addEventListener('seeked', function() {
                                // Draw the frame onto the canvas
                                context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                            });

                            // Add click event listener to open the video modal
                            const videoThumbnail = canvas;
                            videoThumbnail.addEventListener('click', () => {
                                openVideoModal(videoUrl, videoFileId);
                            });
                        });
                    } else {
                        videoList.innerHTML = '<p>No videos uploaded for this lesson.</p>';
                    }
                } catch (error) {
                    console.error('Error loading lesson files:', error);
                }
            }

            // Function to render a thumbnail from the first page of a PDF
            async function renderPdfThumbnail(pdfUrl, pdfFileId, pdfFileName) {
                const canvas = document.getElementById(`thumbnail_${pdfFileId}`);
                const context = canvas.getContext('2d');

                // Load the PDF
                const loadingTask = pdfjsLib.getDocument(pdfUrl);
                const pdf = await loadingTask.promise;

                // Get the first page
                const page = await pdf.getPage(1);

                // Set the desired dimensions for the thumbnail
                const desiredWidth = 100; // Desired width in pixels
                const desiredHeight = 75; // Desired height in pixels

                // Get the original viewport to calculate the scale
                const viewport = page.getViewport({ scale: 1 });

                // Calculate scale based on desired dimensions
                const scaleWidth = desiredWidth / viewport.width;
                const scaleHeight = desiredHeight / viewport.height;
                const scale = Math.min(scaleWidth, scaleHeight); // Use the smaller scale to maintain aspect ratio

                // Set canvas dimensions
                canvas.width = viewport.width * scale;
                canvas.height = viewport.height * scale;

                // Render the page into the canvas context
                const renderContext = {
                    canvasContext: context,
                    viewport: page.getViewport({ scale })
                };
                await page.render(renderContext).promise;

                // Add click event listener to open the PDF modal
                canvas.addEventListener('click', () => {
                    openPdfModal(pdfUrl, pdfFileId, '<%= currentUser._id %>'); // Pass userId as needed
                });

                // Create a title element for the PDF
                const titleElement = document.createElement('div');
                titleElement.textContent = pdfFileName; // Set the title of the PDF
                titleElement.style.textAlign = 'center'; // Center the title
                titleElement.style.marginTop = '5px'; // Add some space above the title

                // Append the title element after the canvas
                canvas.parentElement.appendChild(titleElement);
            }

            // Function to open the video modal
            function openVideoModal(videoUrl) {
    const videoViewer = document.getElementById("videoViewer");
    videoViewer.src = videoUrl;
    document.getElementById("videoModal").style.display = "block";
    console.log("Video modal opened");
}

            // Function to close the video modal
            function closeVideoModal() {
    console.log("Close button clicked");  // Debugging step
    const videoModal = document.getElementById("videoModal");
    const videoViewer = document.getElementById("videoViewer");

    videoModal.style.display = "none";
    videoViewer.pause();  // Pause the video
    videoViewer.src = ""; // Clear src to stop the video
}

            // Event listener for PDF upload form submission

            document.getElementById('uploadPdfForm').addEventListener('submit', async function(event) {
                event.preventDefault(); // Prevent default form submission

                const formData = new FormData(this);
                const roomId = document.getElementById('pdfRoomId').value;
                const userId = '<%= currentUser._id %>'; // User ID for progress tracking

                try {
                    // Upload the PDF via AJAX
                    const response = await fetch(`/admin/upload-pdf/${roomId}`, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        alert('PDF uploaded successfully!');
                        
                        // Reload the list of PDFs and Videos to reflect the new upload
                        loadLessonFiles(roomId, userId); } else {
                        throw new Error('Error uploading PDF');
                    }
                } catch (error) {
                    console.error('Error uploading PDF:', error);
                    alert('Error uploading PDF.');
                }
            });

            // Event listener to handle room clicks and load PDFs and Videos for the room
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.clickable').forEach(function (roomElement) {
                    roomElement.addEventListener('click', function () {
                        const roomId = this.getAttribute('data-room-id');
                        const userId = '<%= currentUser._id %>';

                        document.getElementById('lessonRoomContent').style.display = 'block';
                        loadLessonFiles(roomId, userId);

                        // Update form actions and hidden input values with the room ID
                        document.getElementById('uploadPdfForm').action = `/admin/upload-pdf/${roomId}`;
                        document.getElementById('uploadVideoForm').action = `/admin/upload-video/${roomId}`;
                        document.getElementById('pdfRoomId').value = roomId;
                        document.getElementById('videoRoomId').value = roomId;
                    });
                });
            });

            // Event listener for video upload form submission
            document.getElementById('uploadVideoForm').addEventListener('submit', function(event) {
                event.preventDefault(); // Prevent default form submission

                const formData = new FormData(this);

                // Make sure to get the roomId from the input
                const roomId = document.getElementById('videoRoomId').value;

                fetch(`/admin/upload-video/${roomId}`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
 return response.json(); // Assuming you return JSON from the server
                    } else {
                        throw new Error('Network response was not ok');
                    }
                })
                .then(data => {
                    // Handle the successful upload here
                    alert('Video uploaded successfully!');
                    
                    // Optionally, refresh the uploaded videos list
                    const videoList = document.getElementById('uploadedVideos');
                    videoList.innerHTML = ''; // Clear existing list

                    data.videoFiles.forEach(function(video) {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `
                            <div>
                                <strong>${video.videoFileName}</strong>
                                <video id="video_${video.videoFileId}" style="display:none;" src="/admin/video/${video.videoFileId}" preload="metadata"></video>
                                <canvas id="thumbnail_${video.videoFileId}" style="width: 150px; height: auto; cursor: pointer;"></canvas>
                            </div>
                        `;
                        videoList.appendChild(listItem);

                        // Capture the first frame as a thumbnail
                        const videoElement = document.getElementById(`video_${video.videoFileId}`);
                        const canvas = document.getElementById(`thumbnail_${video.videoFileId}`);
                        const context = canvas.getContext('2d');

                        videoElement.addEventListener('loadedmetadata', function() {
                            // Seek to the first frame (0 seconds)
                            videoElement.currentTime = 0; // Seek to the first frame
                        });

                        videoElement.addEventListener('seeked', function() {
                            // Draw the frame onto the canvas
                            context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                        });

                        // Add click event listener to open the video modal
                        const videoThumbnail = canvas;
                        videoThumbnail.addEventListener('click', () => {
                            openVideoModal(`/admin/video/${video.videoFileId}`, video.videoFileId);
                        });
                    });
                })
                .catch(error => {
                    console.error('Error uploading video:', error);
                    alert('Error uploading video.');
                });
            });
        </script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Select all lesson room items
        const lessonRoomItems = document.querySelectorAll('.list-group-item');
        const layeredContainer = document.querySelector('.layered-container'); // Get the create lesson room section
        const newBigBox = document.querySelector('.newbigbox'); // Main container with buttons
        const uploadPdfSection = document.getElementById('uploadPdfSection'); // PDF upload box
        const uploadVideoSection = document.getElementById('uploadVideoSection'); // Video upload box
    
        // Attach click event to each lesson room item
        lessonRoomItems.forEach(item => {
            item.addEventListener('click', function () {
                layeredContainer.style.display = 'none'; // Hide the create lesson room section
                newBigBox.style.display = 'block'; // Show main container
                uploadPdfSection.style.display = 'none'; // Hide PDF upload section initially
                uploadVideoSection.style.display = 'none'; // Hide video upload section initially
    
               
    
                // Set the roomId for hidden inputs
                document.getElementById('pdfRoomId').value = roomId;
                document.getElementById('videoRoomId').value = roomId;
            });
        });
    
        // Module button click listener to show the PDF upload box and hide newbigbox
        const moduleButton = document.getElementById('moduleButton');
        moduleButton.addEventListener('click', function () {
            newBigBox.style.display = 'none'; // Hide the new big box
            uploadPdfSection.style.display = 'block'; // Show the PDF upload box
            uploadVideoSection.style.display = 'none'; // Hide the video upload section
        });
    
        // Video button click listener to show the video upload box and hide newbigbox
        const videoButton = document.getElementById('videoButton');
        videoButton.addEventListener('click', function () {
            newBigBox.style.display = 'none'; // Hide the new big box
            uploadPdfSection.style.display = 'none'; // Hide the PDF upload box
            uploadVideoSection.style.display = 'block'; // Show the video upload section
        });
    });
    
    </script>
    



        <!-- Logo added outside the sidebar and positioned in the left corner -->
        <div class="container-fluid">
            <img src="/assets/logo.png" alt="Logo" class="img-fluid text-left mt-2" style="width: 80px;">
            <img src="/assets/mw.png" alt="MW" class="img-fluid text-right mt-4" style="width: 80px;">
        </div>
    </body>
</html>