<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;700&display=swap" rel="stylesheet"> <!-- Baloo 2 font -->
    <link rel="stylesheet" href="/lesson.css">
    <title>Lesson</title>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script>
</head>
<body>
    <div class="container-fluid p-0">
        <div class="upper-side row no-gutters p-3 align-items-center fixed-header">
            <!-- Logo on the Top Left -->
            <div class="col-md-4 col-4 d-flex align-items-center">
                <img src="/assets/logo.png" alt="Logo" class="img-fluid logo" style="width: 110px;">
            </div>
    
            <!-- Greetings in the Center -->
            <div class="col-4 col-4 text-center">
                <span class="greeting-text font-weight-bold text-muted" style="font-size: 24px;">
                    Hello Teacher <%= room.teacherName %> <br> Welcome to <%= room.name %>
                </span>
            </div>
    
            <!-- Settings on the Top Right -->
            <div class="col-md-4 col-4 d-flex justify-content-end align-items-center position-relative">
                <img src="/assets/settings-1.svg" alt="Settings" 
                     class="img-fluid settings-icon dropdown-toggle" 
                     style="width: 50px; cursor: pointer;" 
                     onclick="toggleDropdownMenu()">
                
                <!-- Dropdown Menu Content -->
                <div class="dropdown-content position-absolute" id="dropdownMenu" 
                     style="display: none; top: 50px; right: 10px;">
                    <a href="/admin/homeAdmin">Go back</a>
                    <a href="/admin/lessonRoomArchive/<%= room._id %>">Lesson Room Archive</a>
                    <a href="/admin/pdfAndVideoArchive/<%= room._id %>">PDF and Video Archive</a>
                    <a href="/admin/activitiesArchive/<%= room._id %>">Activity Archive</a>
                    <a href="/logout">Logout</a>
                </div>
            </div>
        </div>
    </div>

        <div class="containers row">
            <aside class="col-xl-1 bg-info text-center p-3 rounded-sidebar">
                <nav>
                    <ul class="list-unstyled">
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/dashboard/<%= room._id %>" class="text-dark home-button">
                                <img src="/assets/homebut.png" alt="Home Button" style="width: 60px; height: 60px; display: block; margin:  0 auto;">
                            Dashboard
                            </span>
                            </a>
                        </li>
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/lesson/<%= room._id %>" class="text-dark lesson-button">
                                <span class="text-dark font-weight-bold" style="padding: 10px; display: block;">
                                <img src="/assets/lessonbut.png" alt="Lesson Button" style="width: 60px; height: 60px; display: block; margin: 0 auto;">
                                Lesson
                                </span>
                            </a>
                        </li>
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/activities/<%= room._id %>" class="text-dark activities-button">
                                <img src="/assets/activitiesbut.png" alt="Activities Button" style="width: 70px; height: 70px; display: block; margin: 0 auto;">
                                Activities
                            </a >
                        </li>
                        <li style="margin-bottom: 35px;">
                            <a href="/admin/educGames/<%= room._id %>" class="text-dark game-button">
                                <img src="/assets/educgamesbut.png" alt="Educational Games Button" style="width: 70px; height: 70px; display: block; margin: 0 auto;">
                                Educational Games
                            </a>
                        </li>
                    </ul>
                </nav>
            </aside>

            <main class="col-md-11 lesson">
                <div class="d-flex align-items-center mb-4">
                    <img src="/assets/grid.svg" alt="Grid" class="mr-2" style="width: 20px; height: 20px;">
                    <h4 class="font-weight-bold mb-0 text-dark">Lesson</h4>
                </div>
                <!-- Display existing lesson rooms dynamically -->
                <div id="lessonRoomList" class="mb-2">
                    <h4 class="center-text">Existing Lesson Rooms</h4>
                    <ul class="list-group d-flex flex-row flex-wrap">
                        <% 
                        const buttonColors = ["color-1", "color-2", "color-3", "color-4"];
                        const imgSources = [
                            "/assets/english-4.svg",
                            "/assets/layer-1.svg",
                            "/assets/geography-1.svg",
                            "/assets/socio-1.svg"
                        ];
                    
                        lessonRooms.forEach(function(lessonRoom, index) { 
                            const colorClass = buttonColors[index % buttonColors.length];
                            const imgSrc = imgSources[index % imgSources.length];
                        %>
                        
                        <li class="list-group-item lesson-room d-flex align-items-center mr-2 clickable <%= colorClass %>" 
                            data-room-id="<%= lessonRoom._id %>">
                            
                            <div class="d-flex align-items-center justify-content-between w-100">
                                <div class="lesson-details">
                                    <strong class="mr-2"><%= lessonRoom.subject %></strong> <%= lessonRoom.topic %>
                                    <img src="<%= imgSrc %>" alt="<%= lessonRoom.subject %> Icon" class="ml-2" style="width: 40px;">
                                </div>
                
                                <!-- Kebab Menu Icon and Dropdown for Archiving -->
                                <div class="kebab-menu" onclick="event.stopPropagation(); toggleMenu('<%= lessonRoom._id %>');">
                                    &#x22EE;
                                </div>
                
                                <!-- Dropdown Menu for each room -->
                                <div class="dropdown-menu" id="menu-<%= lessonRoom._id %>" style="display: none;">
                                    <a href="#" onclick="archiveLessonRoom('<%= lessonRoom._id %>'); event.stopPropagation();">Archive</a>
                                </div>
                            </div>
                        </li>
                        <% }); %>
                    </ul>
                </div>

                <!-- New big box section -->
                <div class="newbigbox" style="display: none;"> <!-- Initially hidden -->
                    <div class="d-flex justify-content-center align-items-center mt-3">
                        <button id="moduleButton" class="btn custom-btn d-flex flex-column align-items-center module-button" style="height: 200px;">
                            <img src="/assets/module.png" alt="Module Icon" style="width: 150px; height: 150px;"> <!-- Adjust size as needed -->
                            <span>Module</span>
                        </button>
                        <button id="videoButton" class="btn custom-btn d-flex flex-column align-items-center video-button" style="height: 200px;">
                            <img src="/assets/video.png" alt="Module Icon" style="width: 150px; height: 150px;"> <!-- Adjust size as needed -->
                            <span>Video</span>
                        </button>
                    </div>
                </div>
                

                <!-- Hidden content section for PDF and Video uploads -->
                <div id="lessonRoomContent" class="big-box" style="display: none;">
                    <div class="content-wrapper">
        
                        <!-- Module (PDF Upload and Modal) Section -->
                        <div id="uploadPdfSection" class="left-content" style="display: none;">
                            <h5 class="text-dark">Upload PDF</h5>
                            <form id="uploadPdfForm" action="/admin/upload-pdf/<%= room._id %>" method="POST" enctype="multipart/form-data">
                            <input type="hidden" name="roomId" id="pdfRoomId" value="">
                                <div class="form-group">
                                    <label for="pdfFile">Choose PDF file:</label>
                                    <input type="file" name="pdfFile" class="form-control-file" id="pdfFile" accept=".pdf" required>
                                </div>
                                <button type="submit" class="btn btn-primary">Upload PDF</button>
                            </form>
            
                            <div class="lesson-content">
                                <h3>Uploaded PDFs</h3>
                                <ul id="uploadedPdfs"></ul>
                            </div>

                            <!-- PDF Preview Modal -->
                            <div id="pdfModal" class="modal" style="display: none;">
                                <div class="modal-content">
                                    <span class="close" onclick="closePdfModal()">&times;</span>
                                        <iframe id="pdfViewer" src="" width="100%" height="100%"></iframe>
                                </div>
                                <div class="arrow-box-container">
                                    <a href="/admin/activities/<%= room._id %>" class="arrow-text">Would you like to take a Quiz?</a>
                                </div>
                            </div>
                        </div>

                         <!-- Video (Upload Video) Section -->
                        <div id="uploadVideoSection" class="right-content" style="display: none;">
                            <h5 class="text-dark">Upload Video</h5>
                            <form id="uploadVideoForm" action="" method="POST" enctype="multipart/form-data">
                                <input type="hidden" name="roomId" id="videoRoomId" value="">
                                <div class="form-group">
                                    <label for="videoFile">Choose MP4 video:</label>
                                    <input type="file" name="videoFile" class="form-control-file" id="videoFile" accept=".mp4" required>
                                </div>
                                <button type="submit" class="btn btn-primary">Upload Video</button>
                            </form>

                            <div id="videoModal" style="display: none;">
                                <button onclick="closeVideoModal()" id="closeButton">&times;</button>
                                <video id="modalVideo" controls>
                                    <source id="videoSource" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
            
                            <div class="lesson-content">
                                <h3>Uploaded Videos</h3>
                                <ul id="uploadedVideos"></ul>
                            </div>
                        </div>
                    </div>
                </div>

                 <!-- Lesson Room Creation Form -->
                 <div class="layered-container">
                    <div class="background-image">
                        <div class="form-overlay">
                            <h5>Create a New Lesson Room</h5>
                            <form id="createLessonRoomForm" action="/admin/create-lesson-room/<%= room._id %>" method="POST">
                                <div class="form-group">
                                    <label for="subject">Subject</label>
                                    <input type="text" class="form-control" id="subject" name="subject" placeholder="Enter subject" required>
                                </div>
                                <div class="form-group">
                                    <label for="topic">Topic</label>
                                    <input type="text" class="form-control" id="topic" name="topic" placeholder="Enter topic" required>
                                </div>
                                <button type="submit" class="btn btn-primary">Create Room</button>
                            </form>
                        </div>
                    </div>
                </div>
                
            </main>
        </div>


        <script>
            // // Set global roomId and userId variables for all functions to use
            // const roomId = '<%= room._id %>';
            const userId = '<%= currentUser._id %>';
        
            // Function to toggle the PDF kebab menu display
            function togglePdfMenu(pdfFileId) {
                const menu = document.getElementById(`pdfMenu-${pdfFileId}`);
                document.querySelectorAll('.dropdown-menu').forEach((dropdown) => {
                    if (dropdown !== menu) dropdown.style.display = 'none';
                });
                menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
            }
        
            // Function to toggle the video kebab menu display
            function toggleVideoMenu(videoFileId) {
                const menu = document.getElementById(`videoMenu-${videoFileId}`);
                document.querySelectorAll('.dropdown-menu').forEach(dropdown => {
                    if (dropdown !== menu) dropdown.style.display = 'none';
                });
                menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
            }
        
            // Archive function for a video
            function archiveVideo(videoFileId) {

                    // Retrieve the current roomId dynamically
                const roomId = document.getElementById('videoRoomId').value;

                if (confirm('Are you sure you want to archive this video?')) {
                        fetch(`/admin/archive-video/${videoFileId}`, { method: 'POST' })
                            .then(response => response.json())
                            .then(data => {
                                alert(data.message);
                                document.getElementById(`videoMenu-${videoFileId}`).style.display = 'none';
                                loadLessonFiles(roomId, userId);
                            })
                            .catch(error => {
                                console.error('Error archiving video:', error);
                                alert('Failed to archive video.');
                            });
                    }
                }
                
            // Close dropdowns if clicked outside
            document.addEventListener('click', function(event) {
                const isKebab = event.target.classList.contains('kebab-menu');
                const isDropdownItem = event.target.closest('.dropdown-menu');
                if (!isKebab && !isDropdownItem) {
                    document.querySelectorAll('.dropdown-menu').forEach(menu => {
                        menu.style.display = 'none';
                    });
                }
            });
        

            // Archive function to send an AJAX request for archiving a PDF
            function archivePdf(pdfFileId) {

                const roomId = document.getElementById('pdfRoomId').value;


                // Show a confirmation dialog
                if (!roomId) {
                        alert('Room ID not found. Unable to archive PDF.');
                        return;
                    }

                    if (confirm('Are you sure you want to archive this PDF?')) {
                        fetch(`/admin/archive-pdf/${pdfFileId}`, { method: 'POST' })
                            .then(response => response.json())
                            .then(data => {
                                alert(data.message);
                                document.getElementById(`pdfMenu-${pdfFileId}`).style.display = 'none';
                                loadLessonFiles(roomId, userId);
                            })
                            .catch(error => {
                                console.error('Error archiving PDF:', error);
                                alert('Failed to archive PDF.');
                            });
                    }
                }
            async function loadLessonFiles(roomId, userId) {
    const pdfList = document.getElementById('uploadedPdfs');
    const videoList = document.getElementById('uploadedVideos');


    if (!pdfList || !videoList) {
            console.error('PDF or Video list container not found.');
            return;
        }
        
    pdfList.innerHTML = ''; // Clear previous PDFs
    videoList.innerHTML = ''; // Clear previous Videos

    try {
        const timestamp = new Date().getTime(); 
        const response = await fetch(`/admin/get-lessons/${roomId}?t=${timestamp}`);
        const lessonData = await response.json();
        console.log('Filtered lesson data:', lessonData);

// Load PDFs from server response
if (Array.isArray(lessonData.pdfFiles) && lessonData.pdfFiles.length > 0) {
    console.log('PDF Files:', lessonData.pdfFiles);
    lessonData.pdfFiles.forEach(async (pdf) => {
        const pdfFileId = pdf.pdfFileId;
        const pdfUrl = `/admin/pdf/${pdfFileId}`; // URL to the PDF file
        const listItem = document.createElement('li');
        listItem.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: space-between; position: relative;">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <canvas id="thumbnail_${pdfFileId}" style="cursor: pointer; width: 50px; height: 50px;"></canvas> <!-- Canvas for the thumbnail -->
                    <div>
                        <strong>${pdf.pdfFileName}</strong>
                        <span id="progress_${pdfFileId}" style="display: block; font-size: 0.9em; color: #666;">Loading progress...</span>
                    </div>
                </div>
                <div class="kebab-menu" onclick="togglePdfMenu('${pdfFileId}'); event.stopPropagation();" style="cursor: pointer; margin-left: 10px;">
                    &#x22EE;
                </div>
                <div class="dropdown-menu" id="pdfMenu-${pdfFileId}" style="display: none; position: absolute; top: 20px; right: 0; z-index: 10; background: white; border: 1px solid #ddd; padding: 5px;">
                    <a href="#" onclick="archivePdf('${pdfFileId}'); return false;">Archive</a>
                </div>
            </div>
        `;
        pdfList.appendChild(listItem);

        try {
            // Render thumbnail asynchronously
            await renderPdfThumbnail(pdfUrl, pdfFileId);
        } catch (thumbnailError) {
            console.error(`Failed to render thumbnail for PDF ${pdfFileId}:`, thumbnailError);
        }

        // Fetch progress and update UI
        try {
            const progressResponse = await fetch(`/admin/lesson/get-pdf-progress/${userId}/${pdfFileId}`);
            if (!progressResponse.ok) {
                throw new Error(`Failed to fetch progress: ${progressResponse.statusText}`);
            }

            const progressData = await progressResponse.json();
            const progress = progressData.progress || 0;
            document.getElementById(`progress_${pdfFileId}`).textContent = `Progress: ${progress}%`;
        } catch (progressError) {
            console.error(`Failed to fetch progress for PDF ${pdfFileId}:`, progressError);
        }
    });
} else {
    pdfList.innerHTML = '<p>No PDFs uploaded for this lesson.</p>';
    console.log('No PDFs found');
}

        // Verify Videos are populated correctly
        if (Array.isArray(lessonData.videoFiles) && lessonData.videoFiles.length > 0) {
    console.log('Videos found:', lessonData.videoFiles); // Debug log

    lessonData.videoFiles.forEach(video => {
        console.log('Rendering video:', video);

        const videoFileId = video.videoFileId;
        const videoFileName = video.videoFileName;
        const videoUrl = `/admin/video/${videoFileId}`;

        // Create the video element and canvas to capture the thumbnail
        const videoElement = document.createElement('video');
        videoElement.src = videoUrl;

        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        // Load the video and capture the thumbnail at the 10th second
        videoElement.onloadeddata = () => {
            videoElement.currentTime = 10; // Seek to 10th second
        };

        videoElement.onseeked = () => {
            // Draw the video frame onto the canvas and set the thumbnail image
            canvas.width = 300;
            canvas.height = 200;
            ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

            const thumbnailUrl = canvas.toDataURL(); // Get the image URL from canvas

            const listItem = document.createElement('li');
            listItem.innerHTML = `
                <div class="video-item" style="display: flex; align-items: center; position: relative; width: 100%; margin-bottom: 20px;">
    <!-- Video Thumbnail -->
    <img src="${thumbnailUrl}" width="300" height="200" alt="Thumbnail" class="video-thumbnail" onclick="openVideoModal('${videoUrl}')" style="cursor: pointer;" />

    <!-- Video Info and Kebab Menu -->
    <div class="video-info" style="display: flex; justify-content: space-between; align-items: center; margin-left: 20px; flex-grow: 1;">
        <!-- Video Name -->
        <div class="video-file-name" style="font-weight: bold; color: #333; flex-grow: 1; text-align: left;">
            ${videoFileName}
        </div>

        <!-- Kebab Menu -->
        <div class="kebab-menu" style="position: relative; cursor: pointer;" onclick="toggleVideoMenu('${videoFileId}'); event.stopPropagation();">
            &#x22EE;
            <!-- Dropdown Menu -->
            <div class="dropdown-menu" id="videoMenu-${videoFileId}" style="display: none; position: absolute; top: 20px; right: 0; z-index: 10; background: white; border: 1px solid #ddd; padding: 5px;">
                <a href="#" onclick="archiveVideo('${videoFileId}'); return false;">Archive</a>
            </div>
        </div>
    </div>
</div>
            `;
            videoList.appendChild(listItem);
        };
    });
} else {
    videoList.innerHTML = '<p>No videos uploaded for this lesson.</p>';
    console.log('No videos found');
}

    } catch (error) {
        console.error('Error loading lesson files:', error);
        pdfList.innerHTML = '<p>Error loading PDFs. Please try again.</p>';
        videoList.innerHTML = '<p>Error loading videos. Please try again.</p>';
    }
}
async function renderPdfThumbnail(pdfUrl, pdfFileId, pdfFileName) {
    try {
        const canvas = document.getElementById(`thumbnail_${pdfFileId}`);
        const context = canvas.getContext('2d');

        // Load the PDF
        const loadingTask = pdfjsLib.getDocument(pdfUrl);
        const pdf = await loadingTask.promise;

        // Get the first page
        const page = await pdf.getPage(1);

        // Set the desired width and height for the thumbnail
        const desiredWidth = 300; // Width for the thumbnail
        const desiredHeight = 200; // Height for the thumbnail

        // Get the viewport and calculate the scale based on the desired dimensions
        const viewport = page.getViewport({ scale: 1 });
        const widthScale = desiredWidth / viewport.width;
        const heightScale = desiredHeight / viewport.height;
        const scale = Math.min(widthScale, heightScale); // Use the smaller scale to maintain aspect ratio
        const scaledViewport = page.getViewport({ scale });

        // Set the canvas dimensions
        canvas.width = desiredWidth;
        canvas.height = desiredHeight;

        // Ensure canvas style matches the new size
        canvas.style.width = `${desiredWidth}px`;
        canvas.style.height = `${desiredHeight}px`;

        // Clear the canvas before rendering
        context.clearRect(0, 0, canvas.width, canvas.height);

        // Render the page into the canvas context
        const renderContext = {
            canvasContext: context,
            viewport: scaledViewport
        };
        await page.render(renderContext).promise;

        // Add border directly after rendering
        canvas.style.border = '7px solid #FFDF9F';

        // Add click event listener to open the PDF modal
        canvas.addEventListener('click', () => {
            openPdfModal(pdfUrl, pdfFileId, '<%= currentUser._id %>'); // Pass userId as needed
        });

        // Create a title element for the PDF
        const titleElement = document.createElement('div');
        titleElement.textContent = pdfFileName; // Set the title of the PDF
        titleElement.style.textAlign = 'center'; // Center the title
        titleElement.style.marginTop = '5px'; // Add some space above the title

        // Append the title element after the canvas
        canvas.parentElement.appendChild(titleElement);
    } catch (error) {
        console.error('Error rendering PDF thumbnail:', error);
    }
}

             // Function to open the PDF modal and track progress by scrolling
             function openPdfModal(pdfUrl, pdfFileId, userId) {
                // Display the modal with the PDF content
                const pdfViewer = document.getElementById("pdfViewer");
                pdfViewer.src = pdfUrl;
                document.getElementById("pdfModal").style.display = "block";
    
                // Save initial progress as 100% upon opening if it’s not already full
                savePdfProgress(userId, pdfFileId, 100);
    
                // Track scroll progress within the modal
                pdfViewer.onload = function () {
                    const scrollHandler = () => {
                        const totalHeight = pdfViewer.contentDocument.documentElement.scrollHeight - pdfViewer.clientHeight;
                        const scrolled = pdfViewer.contentDocument.documentElement.scrollTop;
                        const progress = Math.min((scrolled / totalHeight) * 100, 100); // Cap at 100%
    
                        // Save and update display if scrolled to 100%
                        if (progress === 100) {
                            savePdfProgress(userId, pdfFileId, 100).then(() => {
                                pdfViewer.removeEventListener('scroll', scrollHandler);
                            });
                        }
                    };
    
                    // Attach the scroll event handler to track progress
                    pdfViewer.contentDocument.addEventListener('scroll', scrollHandler);
                };
            }
    
            // Function to close the PDF modal
            function closePdfModal() {
                document.getElementById("pdfModal").style.display = "none";
                document.getElementById("pdfViewer").src = ""; // Clear src to stop loading
            }

            // Function to send PDF progress to the server and update display in real-time
            function savePdfProgress(userId, pdfFileId, progress) {
                return fetch('/admin/lesson/pdf-progress', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, pdfFileId, progress })
                })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to save progress'))
                .then(data => {
                    if (data.success) {
                        // Update the progress display in the list immediately
                        const progressElement = document.getElementById(`progress_${pdfFileId}`);
                        if (progressElement) {
                            progressElement.textContent = `Progress: ${progress}%`;
                        }
                    }
                })
                .catch(error => console.error('Error saving progress:', error));
            }
            function openVideoModal(videoUrl) {
            const modalVideo = document.getElementById("modalVideo");
            const videoSource = document.getElementById("videoSource");
            videoSource.src = videoUrl; // Set the video source
            modalVideo.load(); // Load the new video
            document.getElementById("videoModal").style.display = "block"; // Show the modal
        }

        function closeVideoModal() {
            document.getElementById("videoModal").style.display = "none"; // Hide the modal
            const modalVideo = document.getElementById("modalVideo");
            modalVideo.pause(); // Stop the video when modal is closed
            modalVideo.currentTime = 0; // Reset video to start
        }
        
            // Other functions remain unchanged (e.g., openPdfModal, closePdfModal, savePdfProgress)
        
             // Event listener for PDF upload form submission
             document.getElementById('uploadPdfForm').addEventListener('submit', async function(event) {
                event.preventDefault(); // Prevent default form submission

                const submitButton = this.querySelector('button[type="submit"]');
                const formData = new FormData(this);
                const roomId = document.getElementById('pdfRoomId').value;
                const userId = '<%= currentUser._id %>'; // User ID for progress tracking

                 // Disable the button to prevent double submissions
                submitButton.disabled = true;
                submitButton.textContent = "Uploading...";

                try {
                    // Upload the PDF via AJAX
                    const response = await fetch(`/admin/upload-pdf/${roomId}`, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        alert('PDF uploaded successfully!');
                        
                        // Reload the list of PDFs and Videos to reflect the new upload
                        loadLessonFiles(roomId, userId); 
                    } else {
                        throw new Error('Error uploading PDF');
                    }
                } catch (error) {
                    console.error('Error uploading PDF:', error);
                    alert('Error uploading PDF.');
                }finally {
            // Re-enable the button after upload completes or fails
            submitButton.disabled = false;
            submitButton.textContent = "Upload PDF";
        }
            });
        
            // Event listener for Video upload form submission
            document.getElementById('uploadVideoForm').addEventListener('submit', async function(event) {
                event.preventDefault();
                const submitButton = this.querySelector('button[type="submit"]');
                const formData = new FormData(this);
                const roomId = document.getElementById('videoRoomId').value;
                const userId = '<%= currentUser._id %>'; // For dynamic reloading

                 // Disable the button to prevent double submissions
                submitButton.disabled = true;
                submitButton.textContent = "Uploading...";

                try {
                    const response = await fetch(`/admin/upload-video/${roomId}`, { method: 'POST', body: formData });
                    if (response.ok) {
                        alert('Video uploaded successfully!');
                        loadLessonFiles(roomId, userId);
                    } else throw new Error('Error uploading video');
                } catch (error) {
                    console.error('Error uploading video:', error);
                    alert('Error uploading video.');
                }finally {
            // Re-enable the button after upload completes or fails
            submitButton.disabled = false;
            submitButton.textContent = "Upload Video";
        }
            });
        
        </script>

        <script>    
            // Event listener to handle room clicks and load PDFs and Videos for the room
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.clickable').forEach(function (roomElement) {
                    roomElement.addEventListener('click', function () {
                        const roomId = this.getAttribute('data-room-id');
                        const userId = '<%= currentUser._id %>';

                        document.getElementById('lessonRoomContent').style.display = 'block';
                        loadLessonFiles(roomId, userId);

                        // Update form actions and hidden input values with the room ID
                        document.getElementById('uploadPdfForm').action = `/admin/upload-pdf/${roomId}`;
                        document.getElementById('uploadVideoForm').action = `/admin/upload-video/${roomId}`;
                        document.getElementById('pdfRoomId').value = roomId;
                        document.getElementById('videoRoomId').value = roomId;
                    });
                });
            });

            function toggleDropdownMenu() {
        const menu = document.getElementById("dropdownMenu");
        menu.style.display = menu.style.display === "block" ? "none" : "block";
          }

    // Close dropdown when clicking outside
    document.addEventListener("click", function(event) {
        const menu = document.getElementById("dropdownMenu");
        const trigger = document.querySelector(".settings-icon");

        if (!menu.contains(event.target) && event.target !== trigger) {
            menu.style.display = "none";
        }
    });

     // Function to toggle the kebab menu dropdown display
     function toggleMenu(roomId) {
        const menu = document.getElementById(`menu-${roomId}`);
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    }

     // Archive function to send an AJAX request for archiving a lesson room
    function archiveLessonRoom(lessonRoomId) {
        fetch(`/admin/archive-lesson-room/${lessonRoomId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (response.ok) {
                alert('Lesson room archived successfully.');
                location.reload(); // Reload to refresh the lesson room list
            } else {
                alert('Failed to archive lesson room.');
            }
        })
        .catch(error => {
            console.error('Error archiving lesson room:', error);
        });
    }

    // Close dropdowns if clicked outside
    document.addEventListener('click', function(event) {

        const dropdowns = document.querySelectorAll('.dropdown-menu');
        dropdowns.forEach(menu => {
            if (!menu.contains(event.target) && menu.style.display === 'block') {
                menu.style.display = 'none';
            }
        });
    });
        </script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
    const lessonRoomItems = document.querySelectorAll('.list-group-item');
    const layeredContainer = document.querySelector('.layered-container'); // Create lesson room section
    const newBigBox = document.querySelector('.newbigbox'); // Main container with buttons
    const uploadPdfSection = document.getElementById('uploadPdfSection'); // PDF upload section
    const uploadVideoSection = document.getElementById('uploadVideoSection'); // Video upload section
    const lessonElement = document.querySelector('.lesson'); // Lesson container to hide background

    // Hide the lesson background image
    function hideLessonBg() {
        lessonElement.style.backgroundImage = 'none'; // Removes the background image
    }

    // Show the lesson background image again
    function showLessonBg() {
        lessonElement.style.backgroundImage = 'url("/assets/classroom.png")'; // Replace with your original image URL
    }

    lessonRoomItems.forEach(item => {
        item.addEventListener('click', function () {
            layeredContainer.style.display = 'none'; // Hide the create lesson room section
            newBigBox.style.display = 'block'; // Show main button container
            uploadPdfSection.style.display = 'none'; // Initially hide PDF section
            uploadVideoSection.style.display = 'none'; // Initially hide video section

            const roomId = item.getAttribute('data-room-id'); // Get room ID
            document.getElementById('pdfRoomId').value = roomId;
            document.getElementById('videoRoomId').value = roomId;

            // When an existing room is clicked, show the background again
            showLessonBg(); 
        });
    });

    // Show PDF section on Module button click
    document.getElementById('moduleButton').addEventListener('click', function () {
        newBigBox.style.display = 'none';
        uploadPdfSection.style.display = 'block';
        uploadVideoSection.style.display = 'none';
        hideLessonBg(); // Hide the lesson background
    });

    // Show Video section on Video button click
    document.getElementById('videoButton').addEventListener('click', function () {
        newBigBox.style.display = 'none';
        uploadPdfSection.style.display = 'none';
        uploadVideoSection.style.display = 'block';
        hideLessonBg(); // Hide the lesson background
    });
});
</script>

<script>
    window.addEventListener('resize', adjustBodyPadding);
 
 function adjustBodyPadding() {
     const headerHeight = document.querySelector('.fixed-header').offsetHeight;
     document.body.style.paddingTop = `${headerHeight}px`;
 }
 
 // Call the function on page load to set initial padding
 adjustBodyPadding();
 
 </script>

        <!-- Logo added outside the sidebar and positioned in the left corner -->
        <div class="container-fluid">
            <img src="/assets/mw.png" alt="MW" class="img-fluid text-right mt-4" style="width: 80px;">
        </div>
    </div>
</body>
</html>