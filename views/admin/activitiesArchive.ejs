<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Archived Activities</title>
    <style>
        /* Global font style */
        body {
            font-family: 'Baloo 2', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            background-color: #F5F5DC; /* Set background color */
        }

        h1 {
            text-align: center;
            margin: 20px;
        }

        .form-group {
            margin: 20px;
            text-align: center;
        }

        select.form-control {
            padding: 5px;
            font-size: 16px;
            margin-top: 10px;
        }

        /* Background styling for archived sections */
        .archive-container {
            background-image: url('/assets/bg.png');
            background-size: cover; /* Ensure it covers the entire container */
            background-position: center; /* Center the background image */
            padding: 20px; /* Add padding around the content */
            border-radius: 10px; /* Optional: round the corners of the container */
            margin: 20px auto; /* Center the container */
            max-width: 800px; /* Limit max width */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for elevation */
            color: black; /* Ensure text is readable over the background */
        }

        /* List styles */
        ul {
            padding: 0;
            list-style-type: none;
        }

        .archive-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.8); /* Semi-transparent background for readability */
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        img {
            margin-right: 15px;
            width: 50px; /* Default image size */
            height: auto;
        }

        button {
            margin-left: auto;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        /* Go back button */
        a {
            display: block;
            text-align: center;
            margin: 20px auto;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            max-width: 200px;
        }

        a:hover {
            background-color: #0056b3;
        }

        /* Positioning for fixed logos */
        #logo {
            position: fixed;
            top: 10px;
            left: 10px;
            width: 120px; /* Adjust size as needed */
        }

        #mw {
            position: fixed;
            bottom: 10px;
            left: 10px;
            width: 120px; /* Adjust size as needed */
        }

        /* Media Queries for responsiveness */
        @media (max-width: 768px) {
            img {
                width: 40px; /* Smaller image size on small screens */
            }

            button {
                font-size: 14px;
                padding: 5px 8px;
            }
        }

        @media (max-width: 480px) {
            .archive-item {
                flex-direction: column;
                align-items: flex-start;
            }

            img {
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Top-left logo -->
    <img src="/assets/logo.png" id="logo" alt="Logo">

    <!-- Bottom-left MW logo -->
    <img src="/assets/mw.png" id="mw" alt="MW Logo">

    <h1>Archived Content</h1>
    <div class="form-group">
        <label for="archiveSelect">View Archived</label>
        <select class="form-control" id="archiveSelect" name="archiveSelect" onchange="toggleArchiveSections()">
            <option value="activityRooms">Activity Rooms</option>
            <option value="tests">Tests</option>
            <option value="activities"> Activity</option>
        </select>
    </div>

    <div class="archive-container" id="archivedActivityRooms">
        <h2>Archived Activity Rooms</h2>
        <ul>
            <% if (archivedActivityRooms && archivedActivityRooms.length > 0) { %>
                <% archivedActivityRooms.forEach(activityRoom => { %>
                    <li class="archive-item" id="activity-room-<%= activityRoom._id %>">
                        <img src="/assets/activityroomarchive.png" alt="Activity Icon">
                        <strong><%= activityRoom.subject %></strong> - <%= activityRoom.activityType %>
                        <button onclick="unarchiveActivityRoom('<%= activityRoom._id %>')">Restore</button>
                        <button onclick="deleteActivityRoom('<%= activityRoom._id %>')">Delete</button>
                    </li>
                <% }); %>
            <% } else { %>
                <p>No archived activity rooms available.</p>
            <% } %>
        </ul>
    </div>
    

    <div class="archive-container" id="archivedTests" style="display: none;">
        <h2>Archived Tests</h2>
        <ul id="archivedQuizzesList">
            <% if (archivedQuizzes && archivedQuizzes.length > 0) { %>
                <% archivedQuizzes.forEach(quiz => { %>
                    <li class="archive-item" data-quiz-id="<%= quiz._id %>">
                        <img src="/assets/activityarchive.png" alt="Quiz Icon">
                        <strong><%= quiz.title %></strong>
                        <p>Archived on: <%= quiz.archivedAt ? new Date(quiz.archivedAt).toLocaleString() : 'N/A' %></p>
                        <button onclick="unarchiveQuiz('<%= quiz._id %>')">Restore</button>
                        <button onclick="deleteQuiz('<%= quiz._id %>')">Delete</button>
                    </li>
                <% }); %>
            <% } else { %>
                <p>No archived quizzes available.</p>
            <% } %>
        </ul>
        
    </div>
    


    <div class="archive-container" id="archivedActivities" style="display: none;">
        <h2>Archived Activities</h2>
        <ul>
            <% if (archivedActivities && archivedActivities.length > 0) { %>
                <% archivedActivities.forEach(activity => { %>
                    <li class="archive-item" id="activity-<%= activity._id %>">
                        <img src="/assets/activityarchive.png" alt="Activity Icon">
                        <strong><%= activity.title %></strong>
                        <p>Description: <%= activity.description || 'No description provided' %></p>
                        <p>Deadline: <%= activity.deadline ? new Date(activity.deadline).toLocaleString() : 'No deadline' %></p>
                        <button onclick="unarchiveActivity('<%= activity._id %>')">Restore</button>
                        <button onclick="deleteActivity('<%= activity._id %>')">Delete Activity</button>
                    </li>
                <% }); %>
            <% } else { %>
                <li>No archived activities available.</li>
            <% } %>
        </ul>
    </div>
    
    
    
    
    
    

    <div class="dropdown-content">
        <a href="/admin/activities/<%= roomId %>">Go Back</a>
    </div>

<script>
        function toggleArchiveSections() {
            const selectedOption = document.getElementById('archiveSelect').value;
            document.getElementById('archivedActivityRooms').style.display = selectedOption === 'activityRooms' ? 'block' : 'none';
            document.getElementById('archivedTests').style.display = selectedOption === 'tests' ? 'block' : 'none';
            document.getElementById('archivedActivities').style.display = selectedOption === 'activities' ? 'block' : 'none';
        }

        function unarchiveActivityRoom(id) {
            fetch(`/admin/unarchive-activity-room/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message);
                    location.reload();
                })
                .catch(err => console.error(err));
        }

        function unarchiveQuiz(id) {
            fetch(`/admin/unarchive-quiz/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message);
                    location.reload();
                })
                .catch(err => console.error(err));
        }

        function unarchiveActivity(id) {
            fetch(`/admin/unarchive-activity/${id}`, { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    alert(data.message);
                    location.reload();
                })
                .catch(err => console.error(err));
        }

        function deleteQuiz(quizId) {
    if (confirm("Are you sure you want to delete this quiz? This action cannot be undone.")) {
        fetch(`/admin/delete-quiz/${quizId}`, {
            method: 'DELETE',
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);

                    // Remove the deleted quiz from the DOM
                    const quizElement = document.querySelector(`[data-quiz-id="${quizId}"]`);
                    if (quizElement) {
                        quizElement.remove();
                    }
                } else {
                    alert(data.error || "Failed to delete the quiz.");
                }
            })
            .catch(err => console.error("Error deleting quiz:", err));
    }
}

function deleteActivity(activityId) {
    if (confirm('Are you sure you want to delete this activity? This action cannot be undone.')) {
        console.log('Deleting activity with ID:', activityId);
        
        fetch(`/admin/delete-activity/${activityId}`, {
            method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            console.log('Delete response:', data);
            if (data.success) {
                alert('Activity deleted successfully');
                // Find and remove the activity element from the DOM
                const activityElement = document.getElementById(`activity-${activityId}`);
                if (activityElement) {
                    activityElement.remove();  // Remove the activity element
                }
            } else {
                alert('Failed to delete activity: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the activity');
        });
    }
}

function deleteActivityRoom(id) {
    if (confirm("Are you sure you want to delete this Activity Room? This action will delete all associated data.")) {
        fetch(`/admin/delete-activity-room/${id}`, { method: 'DELETE' })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    // Remove the deleted activity room from the DOM
                    const activityRoomElement = document.getElementById(`activity-room-${id}`);
                    if (activityRoomElement) {
                        activityRoomElement.remove();
                    }
                } else {
                    alert("Failed to delete activity room: " + data.message);
                }
            })
            .catch(err => console.error("Error deleting activity room:", err));
    }
}



    </script>
</body>
</html>
